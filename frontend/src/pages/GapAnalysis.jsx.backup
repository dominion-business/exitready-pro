import React, { useState, useEffect } from 'react';
import { FileText, PlayCircle, ChevronDown, ChevronRight, Edit2, Check, HelpCircle, X } from 'lucide-react';
import { getAssessment, startAssessment } from '../services/api';
import AssessmentModal from '../components/AssessmentModal';
import QuestionModal from '../components/QuestionModal';
import './GapAnalysis.css';

const GapAnalysis = () => {
  const [assessment, setAssessment] = useState(null);
  const [allQuestions, setAllQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAssessmentModal, setShowAssessmentModal] = useState(false);
  const [expandedCategory, setExpandedCategory] = useState(null);
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [hoveredGapZone, setHoveredGapZone] = useState(null);
  const [selectedGapFilter, setSelectedGapFilter] = useState(null);
  const [showScoringGuide, setShowScoringGuide] = useState(false);
  const [isScoringGuideCollapsed, setIsScoringGuideCollapsed] = useState(false);

  useEffect(() => {
    loadAssessment();
    loadAllQuestions();
  }, []);

  const loadAssessment = async () => {
    setLoading(true);
    try {
      const result = await getAssessment();
      
      if (result.success) {
        console.log('Assessment loaded:', result.data);
        setAssessment(result.data);
      } else {
        const startResult = await startAssessment();
        if (startResult.success) {
          const newResult = await getAssessment();
          setAssessment(newResult.data);
        }
      }
    } catch (error) {
      console.error('Error loading assessment:', error);
    }
    setLoading(false);
  };

  const loadAllQuestions = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:5000/api/assessment/questions', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setAllQuestions(data.questions || []);
      }
    } catch (error) {
      console.error('Error loading questions:', error);
    }
  };

  const handleModalSave = async () => {
    await loadAssessment();
  };

  const getAnsweredQuestions = () => {
    if (!assessment || !assessment.responses) return [];
    return assessment.responses;
  };

  const getCategoryQuestions = (categoryKey) => {
    // Map category keys to actual question category names
    const categoryMap = {
      'financial_performance': 'financial_performance',
      'revenue_quality': 'revenue_quality',
      'customer_concentration': 'customer_concentration',
      'management_team': 'management_team',
      'competitive_position': 'competitive_position',
      'growth_potential': 'growth_potential',
      'intellectual_property': 'intellectual_property',
      'legal_compliance': 'legal_compliance',
      'owner_dependency': 'owner_dependency',
      'strategic_positioning': 'strategic_positioning'
    };
    
    const actualCategory = categoryMap[categoryKey] || categoryKey;
    return allQuestions.filter(q => q.category === actualCategory);
  };

  const getGapZone = (score) => {
    // N/A questions (score 0) should not be in any gap zone
    if (score === 0) return 'n-a';
    
    // Score is 0-100 percentage, map to new scale
    if (score > 86) return 'no-gaps';              // >86% - Areas with no gaps (Score 5-6)
    if (score > 72) return 'minor-gaps';           // 72-86% - Areas with minor gaps (Score 4-5)
    if (score > 57) return 'considerable-gaps';    // 57-72% - Areas with considerable gaps (Score 3-4)
    if (score > 43) return 'critical-gaps';        // 43-57% - Areas with critical gaps (Score 2-3)
    if (score > 28) return 'very-critical-gaps';   // 28-43% - Areas with very critical gaps (Score 1-2)
    return 'extremely-critical';                   // >0 and <=28% - Areas with extremely critical gaps (Score 1)
  };

  const getGapZoneInfo = (zone) => {
    const zones = {
      'no-gaps': { label: 'No Gaps', color: '#a7d5a8', range: '>86%', scoreRange: '86-100%' },
      'minor-gaps': { label: 'Minor Gaps', color: '#b8d4e8', range: '72-86%', scoreRange: '72-86%' },
      'considerable-gaps': { label: 'Considerable Gaps', color: '#f4ebb0', range: '57-72%', scoreRange: '57-72%' },
      'critical-gaps': { label: 'Critical Gaps', color: '#f5d7b3', range: '43-57%', scoreRange: '43-57%' },
      'very-critical-gaps': { label: 'Very Critical Gaps', color: '#f5c9c9', range: '28-43%', scoreRange: '28-43%' },
      'extremely-critical': { label: 'Extremely Critical', color: '#e8b4b4', range: '0-28%', scoreRange: '0-28%' }
    };
    return zones[zone];
  };

  const getQuestionsByGapZone = () => {
    const answered = getAnsweredQuestions();
    const zones = {
      'no-gaps': [],
      'minor-gaps': [],
      'considerable-gaps': [],
      'critical-gaps': [],
      'very-critical-gaps': [],
      'extremely-critical': [],
      'n-a': []
    };

    answered.forEach(answer => {
      const zone = getGapZone(answer.score);
      if (zones[zone]) {
        zones[zone].push(answer);
      }
    });

    return zones;
  };

  const getAnswer = (questionId) => {
    const answered = getAnsweredQuestions();
    return answered.find(a => a.question_id === questionId);
  };

  const getScoreColor = (percent) => {
    if (percent > 86) return 'bg-[#a7d5a8]';      // Light green - No gaps
    if (percent > 72) return 'bg-[#b8d4e8]';      // Light blue - Minor gaps
    if (percent > 57) return 'bg-[#f4ebb0]';      // Light yellow - Considerable gaps
    if (percent > 43) return 'bg-[#f5d7b3]';      // Light orange/tan - Critical gaps
    if (percent > 28) return 'bg-[#f5c9c9]';      // Light red/pink - Very critical gaps
    return 'bg-[#e8b4b4]';                        // Darker pink - Extremely critical
  };

  const getScoreTextColor = (percent) => {
    if (percent > 86) return 'text-green-700';
    if (percent > 72) return 'text-blue-700';
    if (percent > 57) return 'text-yellow-700';
    if (percent > 43) return 'text-orange-700';
    if (percent > 28) return 'text-red-700';
    return 'text-red-800';
  };

  const getScoreBadgeColor = (score) => {
    if (score > 86) return 'bg-green-100 text-green-800 border-green-300';
    if (score > 72) return 'bg-blue-100 text-blue-800 border-blue-300';
    if (score > 57) return 'bg-yellow-100 text-yellow-800 border-yellow-300';
    if (score > 43) return 'bg-orange-100 text-orange-800 border-orange-300';
    if (score > 28) return 'bg-red-100 text-red-800 border-red-300';
    return 'bg-red-100 text-red-900 border-red-400';
  };

  const handleQuestionEdit = (question, answer) => {
    setSelectedQuestion({
      ...question,
      answer_value: answer?.answer_value,
      answer_text: answer?.answer_text,
      comments: answer?.comments,
      id: answer?.id
    });
  };

  const handleQuestionSave = async () => {
    setSelectedQuestion(null);
    await loadAssessment();
  };

  const handleStartAssessment = async () => {
    setShowAssessmentModal(true);
  };

  const handleGapZoneClick = (zone) => {
    const newFilter = selectedGapFilter === zone ? null : zone;
    setSelectedGapFilter(newFilter);
    
    // Auto-expand ALL categories that have questions in this zone
    if (newFilter) {
      const answered = getAnsweredQuestions();
      const categoriesToExpand = [];
      
      finalCategoryKeys.forEach(catKey => {
        const categoryQuestions = getCategoryQuestions(catKey);
        const hasMatchingQuestions = categoryQuestions.some(q => {
          const answer = answered.find(a => a.question_id === q.question_id);
          return answer && getGapZone(answer.score) === zone;
        });
        
        if (hasMatchingQuestions) {
          categoriesToExpand.push(catKey);
        }
      });
      
      // Expand all matching categories by setting expandedCategory to an array
      setExpandedCategory(categoriesToExpand.length > 0 ? categoriesToExpand : null);
    } else {
      // Collapse all when filter is cleared
      setExpandedCategory(null);
    }
  };

  const toggleCategory = (categoryKey) => {
    // If expandedCategory is an array (from filter), convert to single
    if (Array.isArray(expandedCategory)) {
      setExpandedCategory(categoryKey);
    } else {
      setExpandedCategory(expandedCategory === categoryKey ? null : categoryKey);
    }
  };

  // Category display names mapping (in assessment order)
  const categoryDisplayNames = {
    'financial_performance': 'Financial Health',
    'revenue_quality': 'Revenue Quality',
    'customer_concentration': 'Customer Base',
    'management_team': 'Management Team',
    'competitive_position': 'Competitive Position',
    'growth_potential': 'Growth Trajectory',
    'intellectual_property': 'Intellectual Property',
    'legal_compliance': 'Legal & Compliance',
    'owner_dependency': 'Owner Dependency',
    'strategic_positioning': 'Strategic Position'
  };

  // Define category order (matches assessment question order)
  const categoryOrder = [
    'financial_performance',
    'revenue_quality', 
    'customer_concentration',
    'management_team',
    'competitive_position',
    'growth_potential',
    'intellectual_property',
    'legal_compliance',
    'owner_dependency',
    'strategic_positioning'
  ];

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-gray-600">Loading assessment...</div>
      </div>
    );
  }

  if (!assessment) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">No Assessment Found</h2>
          <button
            onClick={async () => {
              await startAssessment();
              loadAssessment();
            }}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Start Assessment
          </button>
        </div>
      </div>
    );
  }

  const answeredQuestions = getAnsweredQuestions();
  const progressPercent = allQuestions.length > 0
    ? (assessment.answered_questions / allQuestions.length) * 100
    : 0;

  const categoryScores = assessment.category_scores || {};
  
  // Frontend fallback: Calculate real category scores if backend returns same score for all
  const calculateCategoryScores = () => {
    const scores = {};
    const answered = getAnsweredQuestions();
    
    categoryOrder.forEach(catKey => {
      const categoryQuestions = allQuestions.filter(q => q.category === catKey);
      const categoryAnswers = answered.filter(a => {
        const question = categoryQuestions.find(q => q.question_id === a.question_id);
        return question && a.answer_value !== 0; // Exclude N/A answers
      });
      
      if (categoryAnswers.length > 0) {
        const totalScore = categoryAnswers.reduce((sum, a) => sum + a.score, 0);
        scores[catKey] = totalScore / categoryAnswers.length;
      } else {
        scores[catKey] = 0;
      }
    });
    
    return scores;
  };
  
  // Check if backend returned all same scores (indicating it's just using overall score)
  const backendScoreValues = Object.values(categoryScores);
  const allSameScore = backendScoreValues.length > 0 && 
    backendScoreValues.every(score => score === backendScoreValues[0]);
  
  // Use calculated scores if backend scores are all the same
  const finalCategoryScores = allSameScore ? calculateCategoryScores() : categoryScores;
  
  console.log('Backend category scores:', categoryScores);
  console.log('All same score?', allSameScore);
  console.log('Final category scores:', finalCategoryScores);
  
  // Debug logging
  console.log('=== GAP ANALYSIS DEBUG ===');
  console.log('Assessment data:', assessment);
  console.log('Category score keys from backend:', Object.keys(categoryScores));
  console.log('All questions count:', allQuestions.length);
  console.log('All questions:', allQuestions);
  console.log('Answered questions count:', answeredQuestions.length);
  console.log('Answered questions:', answeredQuestions);
  
  // Use ordered category list - filter those that exist in scores
  const backendKeys = Object.keys(finalCategoryScores);
  console.log('Backend category keys:', backendKeys);
  
  const categoryKeys = categoryOrder.filter(key => {
    const exists = finalCategoryScores.hasOwnProperty(key);
    console.log(`Checking ${key}: exists=${exists}, value=${finalCategoryScores[key]}`);
    return exists;
  });
  
  // If no matches with ordered list, use backend keys directly
  const finalCategoryKeys = categoryKeys.length > 0 ? categoryKeys : backendKeys;
  
  console.log('Filtered category keys:', categoryKeys);
  console.log('Final category keys to use:', finalCategoryKeys);
  console.log('=== END DEBUG ===');

  // Filter questions if gap zone is selected
  const getFilteredQuestions = (categoryKey) => {
    const categoryQuestions = getCategoryQuestions(categoryKey);
    if (!selectedGapFilter) return categoryQuestions;

    // Special handling for N/A filter
    if (selectedGapFilter === 'n-a') {
      return categoryQuestions.filter(q => {
        const answer = getAnswer(q.question_id);
        return answer && answer.answer_value === 0;
      });
    }

    // Normal gap zone filtering
    return categoryQuestions.filter(q => {
      const answer = getAnswer(q.question_id);
      if (!answer) return false;
      return getGapZone(answer.score) === selectedGapFilter;
    });
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Business Attractiveness Analysis</h1>
            <p className="text-gray-600">
              Assess your business attractiveness to potential buyers and identify areas for improvement
            </p>
          </div>
          <button
            onClick={() => setShowScoringGuide(true)}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition"
          >
            <HelpCircle size={20} />
            <span>Scoring Guide</span>
          </button>
        </div>
      </div>

      {/* Show "Start Assessment" if no answers yet */}
      {assessment.answered_questions === 0 && (
        <div className="bg-white rounded-lg border-2 border-blue-200 p-8 text-center mb-6">
          <div className="mb-4">
            <FileText size={48} className="mx-auto text-blue-600" />
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            Ready to assess your business attractiveness?
          </h2>
          <p className="text-gray-600 mb-6">
            Complete our comprehensive {allQuestions.length}-question assessment to identify gaps and opportunities
          </p>
          <button
            onClick={handleStartAssessment}
            className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold transition"
          >
            <PlayCircle size={20} className="mr-2" />
            Start Assessment
          </button>
        </div>
      )}

      {/* Show Dashboard if assessment has answers */}
      {assessment.answered_questions > 0 && (
        <div className="space-y-6">
          {/* Overall Progress Card */}
          <div className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-6 text-white">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-2xl font-bold">Overall Business Attractiveness Score</h2>
                <p className="text-blue-100 mt-1">
                  Based on {assessment.answered_questions} of {allQuestions.length} questions answered
                </p>
              </div>
              <div className="text-right">
                <div className="text-5xl font-bold">{Math.round(assessment.overall_score)}%</div>
                <div className="text-blue-100 text-sm mt-1">
                  {assessment.overall_score > 86 ? 'Excellent - No Gaps' :
                   assessment.overall_score > 72 ? 'Good - Minor Gaps' :
                   assessment.overall_score > 57 ? 'Fair - Considerable Gaps' :
                   assessment.overall_score > 43 ? 'Needs Work - Critical Gaps' : 
                   assessment.overall_score > 28 ? 'Poor - Very Critical' : 'Critical - Extremely Critical'}
                </div>
              </div>
            </div>

            <div className="bg-white/20 rounded-full h-3 overflow-hidden">
              <div
                className="bg-white h-full transition-all duration-500 rounded-full"
                style={{ width: `${progressPercent}%` }}
              ></div>
            </div>
            <div className="mt-2 flex justify-between text-sm text-blue-100">
              <span>{Math.round(progressPercent)}% Complete</span>
              <span>{allQuestions.length - assessment.answered_questions} questions remaining</span>
            </div>

            {assessment.answered_questions < allQuestions.length && (
              <div className="mt-4">
                <button
                  onClick={handleStartAssessment}
                  className="px-6 py-2 bg-white text-blue-600 rounded-lg hover:bg-blue-50 font-semibold transition"
                >
                  Continue Assessment
                </button>
              </div>
            )}
          </div>

          {/* Main Content Grid - Categories Left, Charts Right */}
          <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
            {/* LEFT SIDE - Category Scores with Expandable Questions */}
            <div className="lg:col-span-3 space-y-3">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Category Breakdown</h3>
              
              {finalCategoryKeys.map((catKey) => {
                const score = finalCategoryScores[catKey];
                const categoryName = categoryDisplayNames[catKey] || catKey;
                const categoryQuestions = getFilteredQuestions(catKey);
                const isExpanded = Array.isArray(expandedCategory) 
                ? expandedCategory.includes(catKey)
                : expandedCategory === catKey;

                return (
                  <div key={catKey} className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                    {/* Category Header - Clickable */}
                    <button
                      onClick={() => toggleCategory(catKey)}
                      className="w-full p-4 flex items-center justify-between hover:bg-gray-50 transition"
                    >
                      <div className="flex items-center space-x-3">
                        {isExpanded ? <ChevronDown size={20} /> : <ChevronRight size={20} />}
                        <span className="font-semibold text-gray-900">{categoryName}</span>
                      </div>
                      <div className="flex items-center space-x-3">
                        <span className={`text-lg font-bold ${getScoreTextColor(score)}`}>
                          {Math.round(score)}%
                        </span>
                        <div className="w-24 bg-gray-200 rounded-full h-2">
                          <div
                            className={`h-full rounded-full transition-all duration-500 ${getScoreColor(score)}`}
                            style={{ width: `${score}%` }}
                          ></div>
                        </div>
                      </div>
                    </button>

                    {/* Expanded Questions List */}
                    {isExpanded && (
                      <div className="border-t border-gray-200 bg-gray-50">
                        {categoryQuestions.length > 0 ? (
                          <div className="p-4 space-y-2">
                            {categoryQuestions.map((question) => {
                              const answer = getAnswer(question.question_id);
                              return (
                                <div
                                  key={question.question_id}
                                  className={`flex items-start justify-between p-3 rounded border transition ${
                                    answer && answer.answer_value === 0
                                      ? 'bg-gray-50 border-gray-200 opacity-60'
                                      : 'bg-white border-gray-200 hover:border-blue-300'
                                  }`}
                                >
                                  <div className="flex-1">
                                    <p className={`text-sm mb-2 ${
                                      answer && answer.answer_value === 0 ? 'text-gray-400 line-through' : 'text-gray-700'
                                    }`}>
                                      {question.question_text}
                                    </p>
                                    {answer && (
                                      <div className="space-y-1">
                                        {answer.answer_value === 0 ? (
                                          // N/A Display
                                          <div className="flex items-center space-x-2">
                                            <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600 border border-gray-300">
                                              N/A - Not Applicable
                                            </span>
                                          </div>
                                        ) : (
                                          // Normal Score Display
                                          <>
                                            <div className="flex items-center justify-between text-xs text-gray-600 mb-1">
                                              <span>Score: {Math.round(answer.score)}%</span>
                                              <span className={`font-semibold ${getScoreTextColor(answer.score)}`}>
                                                {answer.score > 86 ? 'No Gaps' :
                                                 answer.score > 72 ? 'Minor Gaps' :
                                                 answer.score > 57 ? 'Considerable Gaps' :
                                                 answer.score > 43 ? 'Critical Gaps' :
                                                 answer.score > 28 ? 'Very Critical' : 'Extremely Critical'}
                                              </span>
                                            </div>
                                            <div className="w-full bg-gray-200 rounded-full h-2">
                                              <div
                                                className={`h-full rounded-full transition-all duration-500 ${getScoreColor(answer.score)}`}
                                                style={{ width: `${answer.score}%` }}
                                              ></div>
                                            </div>
                                          </>
                                        )}
                                      </div>
                                    )}
                                  </div>
                                  <button
                                    onClick={() => handleQuestionEdit(question, answer)}
                                    className="ml-3 p-2 text-gray-400 hover:text-blue-600 transition"
                                    title="Edit response"
                                  >
                                    <Edit2 size={16} />
                                  </button>
                                </div>
                              );
                            })}
                          </div>
                        ) : (
                          <div className="p-4 text-center text-gray-500 text-sm">
                            {selectedGapFilter 
                              ? 'No questions match the selected filter in this category'
                              : 'No questions answered in this category yet'}
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>

            {/* RIGHT SIDE - Charts */}
            <div className="lg:col-span-2 space-y-6">
              {/* Gap Distribution Pie Chart */}
              <div className="bg-white rounded-lg border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-bold text-gray-900">
                    Gap Distribution
                  </h3>
                  {selectedGapFilter && (
                    <button
                      onClick={() => {
                        setSelectedGapFilter(null);
                        setExpandedCategory(null);
                      }}
                      className="flex items-center space-x-1 px-3 py-1.5 text-sm font-medium text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition"
                    >
                      <X size={16} />
                      <span>Reset Filter</span>
                    </button>
                  )}
                </div>
                <div className="relative">
                  {answeredQuestions.length > 0 ? (
                    <div className="relative w-full h-64 flex items-center justify-center">
                      <svg viewBox="0 0 200 200" className="w-64 h-64">
                        {(() => {
                          const questionsByZone = getQuestionsByGapZone();
                          
                          // Filter out N/A questions (answer_value === 0) for chart calculation
                          const totalNonNA = answeredQuestions.filter(q => q.answer_value !== 0).length;
                          
                          let currentAngle = -90;
                          
                          return Object.keys(questionsByZone).map((zone) => {
                            // Filter N/A questions from this zone
                            const nonNAQuestions = questionsByZone[zone].filter(q => q.answer_value !== 0);
                            const count = nonNAQuestions.length;
                            
                            if (count === 0) return null;
                            
                            const zoneInfo = getGapZoneInfo(zone);
                            const sweepAngle = (count / totalNonNA) * 360;
                            
                            const startAngle = currentAngle;
                            const endAngle = currentAngle + sweepAngle;
                            const isHovered = hoveredGapZone === zone;
                            const isSelected = selectedGapFilter === zone;
                            const radius = isHovered || isSelected ? 85 : 80;
                            
                            const largeArc = sweepAngle > 180 ? 1 : 0;
                            const startX = 100 + radius * Math.cos((startAngle * Math.PI) / 180);
                            const startY = 100 + radius * Math.sin((startAngle * Math.PI) / 180);
                            const endX = 100 + radius * Math.cos((endAngle * Math.PI) / 180);
                            const endY = 100 + radius * Math.sin((endAngle * Math.PI) / 180);

                            currentAngle = endAngle;

                            return (
                              <g key={zone}>
                                <path
                                  d={`M 100 100 L ${startX} ${startY} A ${radius} ${radius} 0 ${largeArc} 1 ${endX} ${endY} Z`}
                                  fill={zoneInfo.color}
                                  opacity={isHovered || isSelected ? 1 : 0.85}
                                  onMouseEnter={() => setHoveredGapZone(zone)}
                                  onMouseLeave={() => setHoveredGapZone(null)}
                                  onClick={() => handleGapZoneClick(zone)}
                                  className="cursor-pointer transition-all duration-200"
                                  style={{ 
                                    transformOrigin: '100px 100px',
                                    filter: isHovered ? 'brightness(0.7)' : 'none'
                                  }}
                                />
                              </g>
                            );
                          });
                        })()}
                        
                        <circle cx="100" cy="100" r="50" fill="white" />
                      </svg>

                      <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                        <div className="text-center">
                          {hoveredGapZone ? (
                            <>
                              <div className="text-3xl font-bold" style={{ color: getGapZoneInfo(hoveredGapZone).color, filter: 'brightness(0.6)' }}>
                                {getQuestionsByGapZone()[hoveredGapZone].filter(q => q.answer_value !== 0).length}
                              </div>
                              <div className="text-xs font-semibold text-gray-800 mt-1">
                                {getGapZoneInfo(hoveredGapZone).label}
                              </div>
                            </>
                          ) : (
                            <>
                              <div className="text-4xl font-bold text-gray-900">
                                {Math.round(assessment.overall_score)}
                              </div>
                              <div className="text-xs font-semibold text-gray-700">Score</div>
                            </>
                          )}
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-12">
                      <div className="text-gray-400 mb-2">
                        <svg className="w-24 h-24 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
                        </svg>
                      </div>
                      <p className="text-gray-600">No data yet</p>
                      <p className="text-sm text-gray-500">Answer questions to see distribution</p>
                    </div>
                  )}
                </div>

                {assessment.answered_questions > 0 && (
                  <div className="mt-6 space-y-2">
                    {(() => {
                      const questionsByZone = getQuestionsByGapZone();
                      const zones = ['no-gaps', 'minor-gaps', 'considerable-gaps', 'critical-gaps', 'very-critical-gaps', 'extremely-critical'];
                      
                      // Count N/A questions separately
                      const naCount = answeredQuestions.filter(q => q.answer_value === 0).length;
                      
                      return (
                        <>
                          {zones.map((zone) => {
                            // Filter out N/A questions from count
                            const nonNAQuestions = questionsByZone[zone].filter(q => q.answer_value !== 0);
                            const count = nonNAQuestions.length;
                            if (count === 0) return null;

                            const zoneInfo = getGapZoneInfo(zone);
                            const isHovered = hoveredGapZone === zone;
                            const isSelected = selectedGapFilter === zone;

                            return (
                              <div
                                key={zone}
                                className={`flex items-center justify-between p-2 rounded cursor-pointer transition ${
                                  isHovered || isSelected ? 'bg-gray-100' : 'hover:bg-gray-50'
                                }`}
                                onMouseEnter={() => setHoveredGapZone(zone)}
                                onMouseLeave={() => setHoveredGapZone(null)}
                                onClick={() => handleGapZoneClick(zone)}
                              >
                                <div className="flex items-center space-x-2">
                                  <div
                                    className="w-3 h-3 rounded"
                                    style={{ backgroundColor: zoneInfo.color }}
                                  ></div>
                                  <span className="text-sm text-gray-700">
                                    {zoneInfo.label} ({zoneInfo.range})
                                  </span>
                                </div>
                                <span className={`text-sm font-semibold ${isSelected ? 'text-blue-600' : 'text-gray-900'}`}>
                                  {count}
                                </span>
                              </div>
                            );
                          })}
                          
                          {/* N/A Questions Section - Clickable */}
                          {naCount > 0 && (
                            <div 
                              className={`flex items-center justify-between p-2 rounded cursor-pointer transition border-t border-gray-200 mt-2 ${
                                selectedGapFilter === 'n-a' ? 'bg-gray-100' : 'hover:bg-gray-50'
                              }`}
                              onClick={() => {
                                const newFilter = selectedGapFilter === 'n-a' ? null : 'n-a';
                                setSelectedGapFilter(newFilter);
                                
                                // Auto-expand categories with N/A questions
                                if (newFilter === 'n-a') {
                                  const categoriesToExpand = [];
                                  
                                  finalCategoryKeys.forEach(catKey => {
                                    const categoryQuestions = getCategoryQuestions(catKey);
                                    const hasNAQuestions = categoryQuestions.some(q => {
                                      const answer = answeredQuestions.find(a => a.question_id === q.question_id);
                                      return answer && answer.answer_value === 0;
                                    });
                                    
                                    if (hasNAQuestions) {
                                      categoriesToExpand.push(catKey);
                                    }
                                  });
                                  
                                  setExpandedCategory(categoriesToExpand.length > 0 ? categoriesToExpand : null);
                                } else {
                                  setExpandedCategory(null);
                                }
                              }}
                            >
                              <div className="flex items-center space-x-2">
                                <div className="w-3 h-3 rounded bg-gray-400"></div>
                                <span className="text-sm text-gray-600">
                                  N/A - Not Applicable
                                </span>
                              </div>
                              <span className={`text-sm font-semibold ${selectedGapFilter === 'n-a' ? 'text-blue-600' : 'text-gray-600'}`}>
                                {naCount}
                              </span>
                            </div>
                          )}
                        </>
                      );
                    })()}
                  </div>
                )}

                {selectedGapFilter && (
                  <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg text-sm text-blue-800 flex items-center justify-between">
                    <span>Showing "{selectedGapFilter === 'n-a' ? 'N/A - Not Applicable' : getGapZoneInfo(selectedGapFilter).label}" questions</span>
                    <button
                      onClick={() => {
                        setSelectedGapFilter(null);
                        setExpandedCategory(null);
                      }}
                      className="text-blue-600 hover:text-blue-800 transition"
                      title="Clear filter"
                    >
                      <X size={16} />
                    </button>
                  </div>
                )}
              </div>

              {/* Readiness vs Attractiveness Chart */}
              <div className="bg-white rounded-lg border border-gray-200 p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-4">
                  Readiness & Attractiveness
                </h3>
                <div className="relative w-full h-64">
                  <svg viewBox="0 0 100 100" className="w-full h-full">
                    {[20, 40, 60, 80].map(val => (
                      <React.Fragment key={val}>
                        <line x1="0" y1={100-val} x2="100" y2={100-val} stroke="#e5e7eb" strokeWidth="0.5" />
                        <line x1={val} y1="0" x2={val} y2="100" stroke="#e5e7eb" strokeWidth="0.5" />
                      </React.Fragment>
                    ))}
                    
                    <line x1="0" y1="100" x2="100" y2="100" stroke="#374151" strokeWidth="1" />
                    <line x1="0" y1="0" x2="0" y2="100" stroke="#374151" strokeWidth="1" />

                    {assessment.overall_score > 0 && (
                      <circle
                        cx={assessment.readiness_score || 20}
                        cy={100 - (assessment.attractiveness_score || 20)}
                        r="3"
                        fill="#1e40af"
                        stroke="white"
                        strokeWidth="1"
                      />
                    )}
                  </svg>

                  <div className="absolute bottom-0 left-0 right-0 text-center text-xs text-gray-600">
                    Readiness
                  </div>
                  <div className="absolute left-0 top-0 bottom-0 flex items-center">
                    <div className="transform -rotate-90 text-xs text-gray-600 whitespace-nowrap">
                      Attractiveness
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Scoring Guide Modal */}
      {showScoringGuide && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            {/* Modal Header */}
            <div className="sticky top-0 bg-white border-b border-gray-200 p-4 flex items-center justify-between">
              <h3 className="text-xl font-bold text-gray-900">Scoring Guide</h3>
              <button
                onClick={() => setShowScoringGuide(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X size={24} />
              </button>
            </div>

            {/* Modal Content */}
            <div className="p-6">
              {/* Collapsible Scoring Image */}
              <div className="mb-4">
                <button
                  onClick={() => setIsScoringGuideCollapsed(!isScoringGuideCollapsed)}
                  className="flex items-center justify-between w-full p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition"
                >
                  <span className="font-semibold text-gray-900">Scoring Reference Chart</span>
                  {isScoringGuideCollapsed ? <ChevronRight size={20} /> : <ChevronDown size={20} />}
                </button>
                
                {!isScoringGuideCollapsed && (
                  <div className="mt-3 p-4 bg-gray-50 rounded-lg">
                    <img
                      src="/scoring-guide.png"
                      alt="Scoring Guide"
                      className="w-full h-auto rounded"
                    />
                  </div>
                )}
              </div>

              {/* Scoring Descriptions */}
              <div className="space-y-4">
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">How Scores Are Calculated</h4>
                  <p className="text-sm text-gray-600">
                    Each question is scored on a scale that reflects the strength of that aspect of your business. 
                    The overall score is calculated by averaging all category scores, giving you a comprehensive 
                    view of your business attractiveness to buyers.
                  </p>
                </div>

                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Score Ranges</h4>
                  <p className="text-sm text-gray-600 mb-3">Based on the assessment scoring scale where average performance is around 50%:</p>
                  <div className="space-y-2">
                    <div className="flex items-center space-x-3">
                      <div className="w-4 h-4 rounded" style={{ backgroundColor: '#a7d5a8' }}></div>
                      <span className="text-sm"><strong>86-100% (No Gaps):</strong> Exceptional performance, best in class</span>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="w-4 h-4 rounded" style={{ backgroundColor: '#b8d4e8' }}></div>
                      <span className="text-sm"><strong>72-86% (Minor Gaps):</strong> Strong performance, minor improvements possible</span>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="w-4 h-4 rounded" style={{ backgroundColor: '#f4ebb0' }}></div>
                      <span className="text-sm"><strong>57-72% (Considerable Gaps):</strong> Average to good, clear room for improvement</span>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="w-4 h-4 rounded" style={{ backgroundColor: '#f5d7b3' }}></div>
                      <span className="text-sm"><strong>43-57% (Critical Gaps):</strong> Below average, significant work needed</span>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="w-4 h-4 rounded" style={{ backgroundColor: '#f5c9c9' }}></div>
                      <span className="text-sm"><strong>28-43% (Very Critical Gaps):</strong> Poor performance, urgent attention required</span>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="w-4 h-4 rounded" style={{ backgroundColor: '#e8b4b4' }}></div>
                      <span className="text-sm"><strong>0-28% (Extremely Critical):</strong> Critical deficiency or not applicable</span>
                    </div>
                  </div>
                  <div className="mt-3 p-3 bg-blue-50 border-l-4 border-blue-500 rounded">
                    <p className="text-sm text-gray-700">
                      <strong>Note:</strong> The threshold for "best in class" performance is 72% (green zone in the assessment guide), representing clear, documented, and transferable processes.
                    </p>
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Using Your Results</h4>
                  <p className="text-sm text-gray-600 mb-2">
                    Focus on categories with lower scores first. Click on any category to expand and see 
                    individual questions. Use the gap distribution chart to filter questions by score range 
                    and prioritize your improvement efforts.
                  </p>
                  <p className="text-sm text-gray-600">
                    Remember: A lower score isn't bad—it's an opportunity. It shows you exactly where to focus 
                    your efforts to maximize your exit value.
                  </p>
                </div>
              </div>
            </div>

            {/* Modal Footer */}
            <div className="sticky bottom-0 bg-white border-t border-gray-200 p-4">
              <button
                onClick={() => setShowScoringGuide(false)}
                className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
              >
                Got it
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Assessment Modal */}
      {showAssessmentModal && (
        <AssessmentModal
          assessmentId={assessment.assessment_id}
          allQuestions={allQuestions}
          answeredQuestions={answeredQuestions}
          onClose={() => {
            setShowAssessmentModal(false);
            loadAssessment();
          }}
          onSave={handleModalSave}
        />
      )}

      {/* Question Editor Modal */}
      {selectedQuestion && (
        <QuestionModal
          question={selectedQuestion}
          assessmentId={assessment.assessment_id}
          onClose={() => setSelectedQuestion(null)}
          onSave={handleQuestionSave}
        />
      )}
    </div>
  );
};

export default GapAnalysis;